In this lesson, you will:

  (1) Make an AJAX call---through jQuery---to interact with the server
  asyncrhonously;

  (2) Use Seleniun to control the browser activity (to automate
  tests);

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AJAX
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As in the first lesson, let's run this example without symfony. As
there, we will write .php files directly under the directory structure
of the Apache web server.

1. If you are on Linux, create a symbolic link to that directory and
cd intro it:

  $> ln -s /opt/lampp/htdocs/ .
  $> cd htdocs

2. Create a directory for you app, change permission to public, and cd
into it.

  $> sudo mkdir login_example
  $> sudo chown -R $USER login_example
  $> cd login_example


3. Hands On! This example shows the use of AJAX to asyncronously
communicate with a server. 

The following code shows the index.php file for rendering the login
screen to the user. Once the user presses the submit button on the
form, the "submit" handler that is declared in the java script section
of the page captures the submission. That handler is associated with
the login form.

The most important part of the code is the $.ajax method call. That
method accepts a JSON descring a request to the server. The parameter
"type" indicates they type of the HTTP request, the parameter "url"
indicates the address relative to this page, the parameter "data"
indicates what data is to be sent to the server (in this case, all the
form data), the parameter "succcess" is a (callback) function that
indicates what needs to be done once the response arrives. In this
case, it redirects to the page my_profile.php.

==================== index.php
<!doctype html>
<html>
<head>
<script src="https://code.jquery.com/jquery-3.3.1.js" integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60=" crossorigin="anonymous"></script>
</head>
<body>
<form id="loginform" method="post">
    <div>
        Username:
        <input type="text" name="username" id="username" />
        Password:
        <input type="password" name="password" id="password" />    
        <input type="submit" name="loginBtn" id="loginBtn" value="Login" />
    </div>
</form>
<script type="text/javascript">
$(document).ready(function() {
    $('#loginform').submit(function(e) {
        e.preventDefault();
        $.ajax({
            type: "POST",
            url: 'login.php',
            data: $(this).serialize(),
            success: function(response)
            {
                var jsonData = JSON.parse(response);
  
                // user is logged in successfully in the back-end
                // let's redirect
                if (jsonData.success == "1")
                {
                    location.href = 'my_profile.php';
                }
                else
                {
                    alert('Invalid Credentials!');
                }
           }
       });
     });
});
</script>
</body>
</html>

==================== login.php
<?php
if (isset($_POST['username']) && $_POST['username'] && isset($_POST['password']) && $_POST['password']) {
    // do user authentication as per your requirements
    // ... 
    // ...
    // based on successful authentication
    echo json_encode(array('success' => 1));
} else {
    echo json_encode(array('success' => 0));
}


Obs. See the following link for instructions on how to manage your
(secure) sessions:
https://stackoverflow.com/questions/1243150/php-sessions-to-authenticate-user-on-login-form

==================== my_profile.php
<?php
echo 'Please, load my profile'


Access the URL "localhost/login_example" to see your code in operation.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Selenium 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

At this point, you have been presented with the basic material for
developing web applications in PHP. We will not see how to test it.

Selenium is the (very popular) tool to test web applications. It is
not a test framework. It is a library for controlling the
browser. That library is used in test frameworks.

Setup

1. Install the PHP webdriver library through composer. This is the
Selenium library (aka webdriver) that you use in your PHP scripts to
write code that manipulates the UI.

  $> composer require php-webdriver/webdriver

2. Install the latest chromedriver. Follow the instruction at:
  https://sites.google.com/a/chromium.org/chromedriver/downloads

* Assuming you have Google Chrome installed

3. Execute the following code snippet

==================== drive.php
<?php
namespace Facebook\WebDriver;

use Facebook\WebDriver\Remote\DesiredCapabilities;
use Facebook\WebDriver\Remote\RemoteWebDriver;

require_once('vendor/autoload.php');

// Chromedriver (if started using --port=4444 as above)
$serverUrl = 'http://localhost:4444'; // where the chromedriver is located
$driver = RemoteWebDriver::create($serverUrl, DesiredCapabilities::chrome());

// Control your browser as you like
// Go to Wikipedia URL
$driver->get('https://en.wikipedia.org/wiki/Selenium_(software)');
// Find search element by its id, write 'PHP' inside and submit
$driver->findElement(WebDriverBy::id('searchInput')) // find search input element
    ->sendKeys('PHP') // fill the search box
    ->submit(); // submit the whole form
// Find element of 'History' item in menu by its css selector
$historyButton = $driver->findElement(
    WebDriverBy::cssSelector('#ca-history a')
);
// Read text of the element and print it to output
echo 'About to click to a button with text: ' . $historyButton->getText();
// Click the element to navigate to revision history page
$historyButton->click();
